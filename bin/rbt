#!/usr/bin/env ruby
#-*- coding: utf-8 -*-
# vim: filetype=ruby

require 'fileutils'


o = {}
o[:rubies] = File.exist?(File.expand_path('~/.ruby-tapper-rubies_dir_config')) ? \
  File.read(File.expand_path('~/.ruby-tapper-rubies_dir_config')).chomp : ''
o[:suffix] = ""
o[:prefix] = ""
o[:temp]   = true

def help(o={})
  puts "Usage: #{$0} (--verbose|--help|--rubies PATH_TO_RUBIES)"
  unless o[:rubies].empty?
    puts ""
    puts "Rubies:"
    Dir.glob(o[:rubies]+'/'+'*').map{|v| File.basename(v) } \
                                .delete_if{|v|
                                  ['gem','gems','bin'].include?(v)
                                }.each do |v|
      puts "  #{v}"
    end
  end
  exit
end

def set_opts(base={})
  base[:bin]      = base[:rubies]   + '/bin'
  base[:gem]      = base[:rubies]   + '/gem'
  base[:gems]     = base[:rubies]   + '/gems'
  base[:gem_home] = base[:gems]     + '/'     + base[:version]
  base[:gem_bin]  = base[:gem_home] + '/bin'
  base[:ruby]     = base[:rubies]   + '/'     + base[:version]
  base[:ruby_bin] = base[:rubies]   + '/'     + base[:version] + '/bin'
  base
end

def open_tapper(o={})
    ##################### Open a ruby tapper #####################

    ######### Clean up #########
    if File.exist?(o[:bin])
      FileUtils.remove_entry_secure(o[:bin])
      puts "#{o[:bin]} Clean up" if o[:verbose]
    end

    if File.exist?(o[:gem])
      FileUtils.remove_entry_secure(o[:gem])
      puts "#{o[:gem]} Clean up" if o[:verbose]
    end
    ######### Create directory some #########

    #### rubies/bin ####

    unless File.exist?(o[:bin])
      Dir.mkdir(o[:bin])
      puts "#{o[:bin]} create" if o[:verbose]
    end

    #### rubies/gems ####

    unless File.exist?(o[:gems])
      Dir.mkdir(o[:gems])
      puts "#{o[:gems]} create" if o[:verbose]
    end

    #### rubies/gems/{ver} ####

    unless File.exist?(o[:gem_home])
      Dir.mkdir(o[:gem_home])
      puts "#{o[:gem_home]} create" if o[:verbose]
    end

    #### rubies/gems/{ver}/bin ####

    unless File.exist?(o[:gem_bin])
      Dir.mkdir(o[:gem_bin])
      puts "#{o[:gem_bin]} create" if o[:verbose]
    end

    ######### Create symbolic link #########

    #### Gem ####

    FileUtils.symlink(o[:gem_home],o[:gem])
    puts "#{o[:gem_home]} -> #{o[:gem_home]}" if o[:verbose]

    #### Bin ####

    Dir.glob(o[:ruby_bin]+'/**/*').each do |f|
      t = o[:bin]+'/'+File.basename(f)
      FileUtils.symlink(f,t)
      puts "#{f} -> #{t}" if o[:verbose]
    end
end


o[:verbose] = false

case a = ARGV.shift
when '--verbose'
  o[:verbose] = true
when '--rubies'
  o[:rubies] = ARGV.shift.chomp.gsub(/\/$/,'')
  open(File.expand_path('~/.ruby-tapper-rubies_dir_config'),'w') do |f|
    f.puts o[:rubies]
  end
  puts "Add #{o[:rubies]}/bin, #{o[:rubies]}/gem/bin to $PATH of your shell."
  puts "Set #{o[:rubies]}/gem to $GEM_HOME of your shell."
  exit
when '--help'
  help(o)
when '--temp', '-t'
  o[:temp] = true
when /--suffix=(.+)/
  o[:suffix] = $1
when /--prefix=(.+)/
  o[:prefix] = $1
else
  ARGV.unshift a
end
o[:version]  = ARGV.shift
case o[:version]
when nil
  help(o)
when 'gem'
  cmd = ARGV.dup
  Dir.glob(o[:rubies]+'/'+'*').map{|v| File.basename(v) } \
                              .delete_if{|v|
                                ['gem','gems','bin'].include?(v)
                              }.each do |v|
    o[:version] = v
    open_tapper(set_opts(o))
    system 'ruby', '-v'
    system 'gem', *cmd
    puts "-"*80
  end
  exit
end

o = set_opts(o)

if o[:verbose]
  require 'pp'
  pp o
end

open_tapper(o)
